"use strict";(self.webpackChunkStatescope=self.webpackChunkStatescope||[]).push([[2782],{7997:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"input","title":"Input Arguments","description":"This page outlines the required inputs and optional parameters for running Statescope.","source":"@site/docs/input.md","sourceDirName":".","slug":"/input","permalink":"/Statescope/docs/input","draft":false,"unlisted":false,"editUrl":"https://github.com/tgac-vumc/Statescopeweb.git/docs/input.md","tags":[],"version":"current","frontMatter":{"id":"input","title":"Input Arguments","sidebar_label":"Input Arguments"},"sidebar":"tutorialSidebar","previous":{"title":"Installation","permalink":"/Statescope/docs/installation"},"next":{"title":"Python","permalink":"/Statescope/docs/python"}}');var t=s(4848),i=s(8453);const l={id:"input",title:"Input Arguments",sidebar_label:"Input Arguments"},o="Input Arguments",c={},a=[{value:"<strong>Required Datasets</strong>",id:"required-datasets",level:2},{value:"<strong>1\ufe0f\u20e3 Signature Matrices</strong>",id:"1\ufe0f\u20e3-signature-matrices",level:3},{value:"<strong>Available Options for Signature Matrices</strong>",id:"available-options-for-signature-matrices",level:4},{value:"<strong>\ud83d\udccc Option 1: Using Pre-processed Signatures</strong>",id:"-option-1-using-pre-processed-signatures",level:4},{value:"<strong>\ud83d\udccc Option 2: Using Your Own Single-Cell RNA Data</strong>",id:"-option-2-using-your-own-single-cell-rna-data",level:4},{value:"<strong>2\ufe0f\u20e3 Bulk Gene Expression Data</strong>",id:"2\ufe0f\u20e3-bulk-gene-expression-data",level:3},{value:"<strong>3\ufe0f\u20e3 Expected Cell Fractions (Optional)</strong>",id:"3\ufe0f\u20e3-expected-cell-fractions-optional",level:3},{value:"<strong>\u26a0\ufe0f Important Notes</strong>",id:"\ufe0f-important-notes",level:2},{value:"<strong>\ud83d\udd17 Further Resources</strong>",id:"-further-resources",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"input-arguments",children:"Input Arguments"})}),"\n",(0,t.jsxs)(n.p,{children:["This page outlines the required inputs and optional parameters for running ",(0,t.jsx)(n.strong,{children:"Statescope"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"required-datasets",children:(0,t.jsx)(n.strong,{children:"Required Datasets"})}),"\n",(0,t.jsx)(n.h3,{id:"1\ufe0f\u20e3-signature-matrices",children:(0,t.jsx)(n.strong,{children:"1\ufe0f\u20e3 Signature Matrices"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"signature matrix"})," defines the gene expression profiles of different cell types."]}),"\n",(0,t.jsx)(n.h4,{id:"available-options-for-signature-matrices",children:(0,t.jsx)(n.strong,{children:"Available Options for Signature Matrices"})}),"\n",(0,t.jsxs)(n.p,{children:["There are ",(0,t.jsx)(n.strong,{children:"two ways"})," to specify the signature matrix:"]}),"\n",(0,t.jsx)(n.h4,{id:"-option-1-using-pre-processed-signatures",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Option 1: Using Pre-processed Signatures"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Statescope provides pre-processed signatures for various tumor types."}),"\n",(0,t.jsxs)(n.li,{children:["To use these signatures, specify the ",(0,t.jsx)(n.strong,{children:"TumorType"})," and the number of cell types (",(0,t.jsx)(n.code,{children:"Ncelltypes"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:["Available options for ",(0,t.jsx)(n.code,{children:"TumorType"})," and ",(0,t.jsx)(n.code,{children:"Ncelltypes"})," can be found in the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/Statescope/docs/processed-signatures",children:"Processed Signatures"})})," page."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example using pre-processed signatures:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Statescope_model = Initialize_Statescope(Bulk, TumorType='PBMC', Ncelltypes=7, Ncores=40)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PBMC"})," is the ",(0,t.jsx)(n.strong,{children:"pre-processed signature"})," used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Ncelltypes=7"})," specifies the number of cell types to use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Ncores=40"})," defines the number of CPU cores allocated."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"-option-2-using-your-own-single-cell-rna-data",children:(0,t.jsx)(n.strong,{children:"\ud83d\udccc Option 2: Using Your Own Single-Cell RNA Data"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Users can also provide their own ",(0,t.jsx)(n.strong,{children:"custom single-cell data"})," in ",(0,t.jsx)(n.code,{children:".h5ad"})," format."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.strong,{children:"cell type annotations"})," should be present in the key specified in ",(0,t.jsx)(n.code,{children:"celltype_key"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example using a custom signature matrix:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"Statescope_model = Initialize_Statescope(\n    Bulk, \n    Signature=Signature, \n    celltype_key='leiden', \n    Ncores=40\n)\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Bulk"})," is the bulk RNA-seq dataset (transposed)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Signature"})," is the ",(0,t.jsx)(n.strong,{children:"custom signature matrix"})," derived from single-cell data."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"celltype_key='leiden'"})," specifies the annotation key in the ",(0,t.jsx)(n.code,{children:".h5ad"})," file."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"\u26a0\ufe0f Note:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Single-cell data should be preprocessed"})," (filtering, QC, normalization)."]}),"\n",(0,t.jsxs)(n.li,{children:["Statescope handles internal ",(0,t.jsx)(n.strong,{children:"normalization and preprocessing"})," automatically."]}),"\n",(0,t.jsxs)(n.li,{children:["Ensure the cell type annotations exist under the key ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"celltype_key"})})," in ",(0,t.jsx)(n.code,{children:".obs"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"2\ufe0f\u20e3-bulk-gene-expression-data",children:(0,t.jsx)(n.strong,{children:"2\ufe0f\u20e3 Bulk Gene Expression Data"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Y"}),": An ",(0,t.jsx)(n.em,{children:"Ngene"})," by ",(0,t.jsx)(n.em,{children:"Nsample"})," matrix containing bulk gene expression data."]}),"\n",(0,t.jsxs)(n.li,{children:["Should be provided in ",(0,t.jsx)(n.strong,{children:"linear scale"})," (",(0,t.jsx)(n.strong,{children:"without"})," log-transformation)."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," Ideally, a ",(0,t.jsx)(n.strong,{children:"pandas DataFrame"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example format in Python:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import pandas as pd \nBulk = pd.read_csv("bulk_expression.csv", index_col=0)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"3\ufe0f\u20e3-expected-cell-fractions-optional",children:(0,t.jsx)(n.strong,{children:"3\ufe0f\u20e3 Expected Cell Fractions (Optional)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Expectation"}),": An ",(0,t.jsx)(n.em,{children:"Nsample"})," by ",(0,t.jsx)(n.em,{children:"Ncelltype"})," matrix."]}),"\n",(0,t.jsxs)(n.li,{children:["Specifies prior expectations of cell type proportions (",(0,t.jsx)(n.strong,{children:"used by OncoBLADE"}),")."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format:"})," Ideally, a ",(0,t.jsx)(n.strong,{children:"pandas DataFrame"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example format in Python:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'expected_fractions = pd.read_csv("expected_cell_fractions.csv", index_col=0)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"\ufe0f-important-notes",children:(0,t.jsx)(n.strong,{children:"\u26a0\ufe0f Important Notes"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Bulk RNA-seq data should be in linear scale (not log-transformed)."}),"\n",(0,t.jsx)(n.li,{children:"Signature matrices should be in log-scale."}),"\n",(0,t.jsxs)(n.li,{children:["Single-cell ",(0,t.jsx)(n.code,{children:".h5ad"})," files should contain filtered, QC\u2019d, and annotated cell types."]}),"\n",(0,t.jsx)(n.li,{children:"pandas DataFrames** are recommended for structured inputs."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"-further-resources",children:(0,t.jsx)(n.strong,{children:"\ud83d\udd17 Further Resources"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\ud83d\udcc4 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/Statescope/docs/processed-signatures",children:"Processed Signatures"})})]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83d\udcd8 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/Statescope/docs/python",children:"Python Tutorial"})})]}),"\n",(0,t.jsxs)(n.li,{children:["\ud83c\udff7 ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://github.com/tgac-vumc/Statescopeweb.git",children:"GitHub Repository"})})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var r=s(6540);const t={},i=r.createContext(t);function l(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);