"use strict";(self.webpackChunkStatescope=self.webpackChunkStatescope||[]).push([[9228],{7633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"python","title":"Python tutorial for Statescope","description":"In this tutorial, we will walk through setting up and running the Statescope package in Python for bulk data analysis. We will cover installation, environment setup, data import, deconvolution, refinement, and cell state discovery.","source":"@site/docs/python.md","sourceDirName":".","slug":"/python","permalink":"/Statescopeweb/docs/python","draft":false,"unlisted":false,"editUrl":"https://github.com/tgac-vumc/Statescopeweb.git/docs/python.md","tags":[],"version":"current","frontMatter":{"id":"python","title":"Python tutorial for Statescope"},"sidebar":"tutorialSidebar","previous":{"title":"Input Arguments","permalink":"/Statescopeweb/docs/input"},"next":{"title":"R","permalink":"/Statescopeweb/docs/r"}}');var i=n(4848),o=n(8453);const a={id:"python",title:"Python tutorial for Statescope"},r="Statescope Tutorial",l={},c=[{value:"1. Installation",id:"1-installation",level:2},{value:"2. Importing Dependencies",id:"2-importing-dependencies",level:2},{value:"3. Loading Your Bulk Data",id:"3-loading-your-bulk-data",level:2},{value:"4. Initializing Statescope",id:"4-initializing-statescope",level:2},{value:"5. Deconvolution",id:"5-deconvolution",level:2},{value:"6. Refinement",id:"6-refinement",level:2},{value:"7. Cell State Discovery",id:"7-cell-state-discovery",level:2},{value:"8. Visualization",id:"8-visualization",level:2},{value:"8.1 Visualizing Fractions",id:"81-visualizing-fractions",level:3},{value:"8.2 Visualizing Purified Gene Expression Profiles",id:"82-visualizing-purified-gene-expression-profiles",level:3},{value:"8.3 Visualizing Top Genes Per Cell State",id:"83-visualizing-top-genes-per-cell-state",level:3},{value:"9. Summary",id:"9-summary",level:2}];function d(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"statescope-tutorial",children:"Statescope Tutorial"})}),"\n",(0,i.jsxs)(t.p,{children:["In this tutorial, we will walk through setting up and running the ",(0,i.jsx)(t.strong,{children:"Statescope"})," package in Python for bulk data analysis. We will cover installation, environment setup, data import, deconvolution, refinement, and cell state discovery."]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"1-installation",children:"1. Installation"}),"\n",(0,i.jsx)(t.p,{children:"Please follow the [installation steps for Python](docid - installation) and create or activate your conda environment:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"conda create -n statescope_env python=3.8\nconda activate statescope_env\n"})}),"\n",(0,i.jsx)(t.p,{children:"Make sure you have the necessary dependencies installed before proceeding."}),"\n",(0,i.jsx)(t.h2,{id:"2-importing-dependencies",children:"2. Importing Dependencies"}),"\n",(0,i.jsx)(t.p,{children:"Below is an example of how you might structure your imports within a Python script or Jupyter notebook. Adjust paths and filenames as needed."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import Statescope\nfrom Statescope import Initialize_Statescope\nimport pandas as pd\nimport pickle\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"3-loading-your-bulk-data",children:"3. Loading Your Bulk Data"}),"\n",(0,i.jsx)(t.p,{children:"For this tutorial, we\u2019ll demonstrate using test data from a GitHub repository.\nReplace the URL below with your own bulk data source as needed."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Example test dataset (subset of transcriptome data)\nBulk = pd.read_csv(\n    'https://github.com/tgac-vumc/OncoBLADE/raw/refs/heads/main/data/Transcriptome_matrix_subset.txt',\n    sep='\\t',\n    index_col='symbol'\n)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["For loading your own Bulk RNA-seq data check the input requirements for the dataset on the ",(0,i.jsx)(t.a,{href:"/Statescopeweb/docs/input",children:"Input Requirements"})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"4-initializing-statescope",children:"4. Initializing Statescope"}),"\n",(0,i.jsx)(t.p,{children:"Choose an appropriate tumor or tissue type. Currently supported options include:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"NSCLC"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"PDAC"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.code,{children:"PBMC"})}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:["More details about the pre-processed scRNA references present in ",(0,i.jsx)(t.a,{href:"/Statescopeweb/docs/processed-signatures",children:"Processed Signature Datasets"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"Statescope_model = Initialize_Statescope(Bulk, TumorType='NSCLC')\n"})}),"\n",(0,i.jsxs)(t.p,{children:["For providing your own scRNA-seq dataset check ",(0,i.jsx)(t.a,{href:"/Statescopeweb/docs/input",children:"Input Requirements"})," for the correct format."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"import scanpy as sc \nfile_path = 'scRNA.h5ad' ###scRNA data should be in h5ad format\nSignature = sc.read_h5ad(file_path)\nStatescope_model = Initialize_Statescope(Bulk, Signature = Signature, celltype_key= 'celltype_key', Ncores = 40) ####Specify celltype_key in the adata.obs\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"5-deconvolution",children:"5. Deconvolution"}),"\n",(0,i.jsx)(t.p,{children:"Deconvolution is used to estimate cell-type-specific expression from bulk data."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"Statescope_model.Deconvolution()\n"})}),"\n",(0,i.jsx)(t.p,{children:"After deconvolution, you can extract the fractions of each gene across different cell types using:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"Fractions = Statescope_model.Fractions  # shape: [N_genes x N_cell_types]\nprint(Fractions.head())\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"6-refinement",children:"6. Refinement"}),"\n",(0,i.jsx)(t.p,{children:"Refinement is performed to improve the estimation of cell-type-specific gene expression profiles."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"Statescope_model.Refinement()\n\n# You can run the refinement multiple times if desired\nStatescope_model.Refinement()\n"})}),"\n",(0,i.jsx)(t.p,{children:"The refined gene expression profiles for each cell type can be accessed:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from Statescope import Extract_GEX\n##Gene expression of the cell type you want to extract \nExtract_GEX(Statescope_model, 'Celltype')\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"7-cell-state-discovery",children:"7. Cell State Discovery"}),"\n",(0,i.jsx)(t.p,{children:"To discover potential sub-states or subpopulations within each cell type, run:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"Statescope_model.StateDiscovery()\n"})}),"\n",(0,i.jsxs)(t.p,{children:["After running state discovery, you can extract information about the discovered sub-states (loadings, etc.) from the model. The specific attributes and methods will depend on how ",(0,i.jsx)(t.strong,{children:"Statescope"})," organizes its results. For example:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from Statescope import Extract_StateLoadings\nExtract_StateLoadings(Statescope_model)\n"})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.em,{children:"(Make sure to check the Statescope documentation for more details on these attributes.)"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"8-visualization",children:"8. Visualization"}),"\n",(0,i.jsx)(t.h3,{id:"81-visualizing-fractions",children:"8.1 Visualizing Fractions"}),"\n",(0,i.jsx)(t.p,{children:"To quickly visualize the fraction matrix, you can use a heatmap function provided by Statescope:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from Statescope import Heatmap_Fractions\n\nHeatmap_Fractions(Statescope_model)\n"})}),"\n",(0,i.jsx)(t.p,{children:"This generates a heatmap of the cell-type fractions or scores across genes (or samples, depending on how your data is organized)."}),"\n",(0,i.jsx)(t.h3,{id:"82-visualizing-purified-gene-expression-profiles",children:"8.2 Visualizing Purified Gene Expression Profiles"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from Statescope import Heatmap_GEX\n\nHeatmap_GEX(Statescope_model, 'Cell Type')\n"})}),"\n",(0,i.jsx)(t.h3,{id:"83-visualizing-top-genes-per-cell-state",children:"8.3 Visualizing Top Genes Per Cell State"}),"\n",(0,i.jsx)(t.p,{children:"You can choose how many genes per state to be visualised in the Bar plot using the top_genes argument"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"from Statescope import BarPlot_StateLoadings\n# Example Usage\nBarPlot_StateLoadings(Statescope_model, top_genes=1)\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"9-summary",children:"9. Summary"}),"\n",(0,i.jsx)(t.p,{children:"By following these steps, you will:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Install"})," and ",(0,i.jsx)(t.strong,{children:"set up"})," your environment."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Load"})," your bulk data (or use the provided test dataset)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Initialize"})," Statescope with the appropriate ",(0,i.jsx)(t.code,{children:"TumorType"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Perform Deconvolution"})," to estimate cell-type fractions."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Refine"})," those estimates for improved accuracy."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Discover"})," sub-states (cell state discovery)."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Visualize"})," your results through heatmaps and other methods."]}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"Feel free to adjust the code to fit your data structure, directory organization, or specific analysis needs. For more advanced usage, please consult the official Statescope documentation or check additional examples in the repository."})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(6540);const i={},o=s.createContext(i);function a(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);